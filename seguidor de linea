let theWorld;
let BochoAmarillo;

// Load the image.
function preload() {
  theWorld = loadImage("/assets/pista.png");
}

function setup() {
  // Set the canvas the width and height
  createCanvas(640, 480);
  frameRate(50);

  // Draw the image once.
  image(theWorld, 0, 0);
  
  // Establece una posición fija para el robot
  let startX = width / 2;  // Centro del canvas
  let startY = height / 2; // Centro del canvas

  BochoAmarillo = new BochoBot(startX, startY, 90, 50, theWorld);
}

function draw() {
  // Draw the image and scale it to cover the canvas.
  image(theWorld, 0, 0);
  
  BochoAmarillo.followLine();
  BochoAmarillo.draw();
}

class BochoBot {
  constructor(x, y, angle, size, world) {
    this.x = x;
    this.y = y;
    this.angle = angle * PI / 180.0;
    this.radius = size;
    this.size_sensor = this.radius / 5;
    this.world = world;
    this.step_size = 5;
    this.step_angle = PI / 15;
  }

  draw() {
    let status_sensor = this.read_sensors();

    push();
    translate(this.x, this.y);
    rotate(this.angle);

    // Dibujar al bochobot
    noStroke();
    fill(236, 189, 64);
    circle(0, 0, this.radius);

    // Dibujar estado de los sensores
    noStroke();
    fill(status_sensor[0] == 0 ? color(255, 0, 0) : color(200, 255, 0));
    circle(this.radius / 4, -this.radius / 4, this.size_sensor);

    fill(status_sensor[1] == 0 ? color(255, 0, 0) : color(200, 255, 0));
    circle(this.radius / 4, this.radius / 4, this.size_sensor);

    pop();
  }

  read_sensors() {
    let vsl = createVector(this.radius / 4, -this.radius / 4);
    vsl.rotate(this.angle);
    let pixelColor = this.world.get(this.x + vsl.x, this.y + vsl.y);
    let s1 = pixelColor[0];

    let vsr = createVector(this.radius / 4, this.radius / 4);
    vsr.rotate(this.angle);
    pixelColor = this.world.get(this.x + vsr.x, this.y + vsr.y);
    let s2 = pixelColor[0];

    return [s1, s2];
  }

  followLine() {
    let sensors = this.read_sensors();
    if (sensors[0] == 0 && sensors[1] == 0) {
      this.move_forward();
    } else if (sensors[0] == 0) {
      this.rotate_left();
    } else if (sensors[1] == 0) {
      this.rotate_right();
    } else {
      this.move_forward();
    }
  }

  move_forward() {
    let position = createVector(this.step_size, 0);
    position.rotate(this.angle);
    this.x += position.x;
    this.y += position.y;

    // Control de límites
    this.x = constrain(this.x, 0, width);
    this.y = constrain(this.y, 0, height);
  }

  rotate_left() {
    this.angle -= this.step_angle;
  }

  rotate_right() {
    this.angle += this.step_angle;
  }
}
